name: Airflow Pipeline CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'dags/**'
      - 'docker/**'
      - 'src/**'
      - 'requirements.txt'
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Images
        run: |
          docker-compose build
          docker-compose up -d

      - name: Wait for Airflow
        run: |
          echo "Waiting for Airflow to be ready..."
          timeout 60s bash -c 'until curl -s http://localhost:8080/health > /dev/null; do sleep 5; done'

      - name: Test DAG Import
        run: |
          docker-compose exec -T airflow-scheduler \
            python -c "
            from airflow.models import DagBag
            dag_bag = DagBag('/opt/airflow/dags')
            if dag_bag.import_errors:
                raise Exception(f'DAG import errors: {dag_bag.import_errors}')
            dag = dag_bag.get_dag('stock_prediction_pipeline')
            if not dag:
                raise Exception('stock_prediction_pipeline DAG not found')
            print('DAG import successful')
            "

      - name: Test DAG Tasks
        run: |
          docker-compose exec -T airflow-scheduler \
            airflow dags test stock_prediction_pipeline $(date -I)

      - name: Check Airflow Logs
        if: always()
        run: |
          docker-compose logs airflow-scheduler
          docker-compose logs airflow-webserver

      - name: Upload Airflow Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: airflow-logs
          path: logs/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to Production
        run: |
          echo "Deploying to production..."
          # Add your deployment steps here
          # For example:
          # - Push to Docker registry
          # - Update Kubernetes deployment
          # - Trigger cloud deployment